import streamlit as st
import json
from azure.ai.inference import ChatCompletionsClient
from azure.ai.inference.models import SystemMessage, UserMessage, AssistantMessage
from azure.core.credentials import AzureKeyCredential
from PyPDF2 import PdfReader
import fitz
import pytesseract
from PIL import Image
from fpdf import FPDF
import os
import csv
import io

# --- Configuration Azure ---
endpoint = "https://DeepSeek-R1-iidkm.eastus2.models.ai.azure.com"
api_key = "u2tl0lAkttAf0dEDO4UP7yxYfxpCKSQt"
model_name = "DeepSeek-R1-iidkm"

# --- Chargement des prompts ---
with open("prompt_cards.json", "r", encoding="utf-8") as f:
    prompt_data = json.load(f)

prompt_options = [card["title"] for card in prompt_data]
prompt_descriptions = {card["title"]: card["description"] for card in prompt_data}
prompts = {card["title"]: card["prompt"] for card in prompt_data}

st.set_page_config(page_title="Assistant Fiscal ‚Äì VA Consulting", layout="centered")
# st.image("va_logo.jpg", width=200)
st.title("VA CONSULTING ‚Äì Assistant Fiscal IA")
st.markdown("""
Bienvenue dans votre assistant fiscal intelligent, con√ßu pour r√©pondre √† toutes vos questions fiscales en Afrique de l‚ÄôOuest francophone. Posez une question ou t√©l√©versez un document pour obtenir des r√©ponses pr√©cises, rapides et adapt√©es aux r√©glementations locales.
""")

mode_assistant = st.selectbox("üß† Choisissez un mode d'assistance :", prompt_options, help=prompt_descriptions[prompt_options[0]])
st.caption(f"üí° {prompt_descriptions[mode_assistant]}")

# --- Informations utilisateur ---
st.markdown("---")
col1, col2 = st.columns(2)
with col1:
    nom_utilisateur = st.text_input("üë§ Votre nom complet")
    entreprise_utilisateur = st.text_input("üè¢ Nom de votre entreprise")
with col2:
    email_utilisateur = st.text_input("üìß Votre adresse email")
    paiement_effectue = st.checkbox("‚úÖ J'ai pay√© 2 000 XOF via Orange Money")

st.markdown("""
üí∞ **Acc√®s mensuel : 2 000 XOF**  
Effectuez votre paiement via **Orange Money** au : **+226 76 43 73 58**
---
""")

# --- Question directe ---
st.markdown("### üßæ Posez une question fiscale")
question_utilisateur = st.text_input("√âcrivez votre question ici")
if question_utilisateur:
    client = ChatCompletionsClient(endpoint=endpoint, credential=AzureKeyCredential(api_key))
    reponse = client.complete(
        messages=[
            SystemMessage(content=prompts[mode_assistant]),
            UserMessage(content=question_utilisateur),
        ],
        max_tokens=2048,
        model=model_name
    )
    resultat = reponse.choices[0].message.content
    st.success(resultat)

    # Export PDF avec support UTF-8
    pdf = FPDF()
    pdf.add_page()
    pdf.add_font("DejaVu", "", "DejaVuSans.ttf", uni=True)
    pdf.set_font("DejaVu", size=12)
    pdf.multi_cell(0, 10, txt=resultat)
    pdf_output = pdf.output(dest="S").encode("latin-1", "ignore")
    st.download_button("üìÑ T√©l√©charger la r√©ponse en PDF", data=pdf_output, file_name="reponse_va.pdf", mime="application/pdf")

    if email_utilisateur:
        try:
            with open("va_leads.csv", "a", newline="", encoding="utf-8") as file:
                csv.writer(file).writerow([nom_utilisateur, entreprise_utilisateur, email_utilisateur, question_utilisateur, resultat])
        except:
            st.warning("‚ö†Ô∏è Erreur lors de l'enregistrement des informations.")

# --- T√©l√©versement de document ---
st.markdown("### üìÇ Ou t√©l√©versez un document fiscal (.pdf ou .txt)")
fichier = st.file_uploader("T√©l√©verser un fichier", type=["pdf", "txt"])
if fichier:
    donnees = fichier.getvalue()
    texte = ""

    if fichier.type == "application/pdf":
        try:
            pdf = PdfReader(io.BytesIO(donnees))
            texte = "\n".join([page.extract_text() or "" for page in pdf.pages])
        except:
            texte = ""

        if not texte.strip():
            st.info("üì∑ PDF scann√© d√©tect√©. OCR en cours...")
            try:
                doc = fitz.open(stream=donnees, filetype="pdf")
                for page in doc:
                    img = Image.open(io.BytesIO(page.get_pixmap(dpi=300).tobytes()))
                    texte += pytesseract.image_to_string(img, lang="fra")
            except:
                st.error("‚ùå √âchec de l'extraction de texte.")
                st.stop()
    else:
        texte = donnees.decode("utf-8")

    if not texte.strip():
        st.warning("‚ö†Ô∏è Aucun texte exploitable trouv√©.")
    else:
        st.write("‚úèÔ∏è R√©sultat OCR (vous pouvez corriger ci-dessous) :")
        texte_corrige = st.text_area("Modifier le texte extrait :", value=texte[:10000], height=300)

        def decouper_texte(texte, max_len=3000, chevauchement=500):
            blocs, i = [], 0
            while i < len(texte):
                blocs.append(texte[i:i+max_len])
                i += max_len - chevauchement
            return blocs

        blocs_texte = decouper_texte(texte_corrige)

        client = ChatCompletionsClient(endpoint=endpoint, credential=AzureKeyCredential(api_key))
        if st.button("üß† R√©sumer le document complet"):
            resumes = []
            for i, bloc in enumerate(blocs_texte):
                st.info(f"Traitement du bloc {i+1}/{len(blocs_texte)}...")
                rep = client.complete(
                    messages=[
                        SystemMessage(content=prompts[mode_assistant]),
                        UserMessage(content=bloc),
                    ],
                    max_tokens=2048,
                    model=model_name
                )
                resumes.append(rep.choices[0].message.content)

            resume_final = "\n".join(resumes)
            st.success(resume_final)

            suivi = st.text_input("üîÑ Posez une question compl√©mentaire bas√©e sur ce r√©sum√© :")
            if suivi:
                reponse_suivi = client.complete(
                    messages=[
                        SystemMessage(content=prompts[mode_assistant]),
                        UserMessage(content=resume_final[:3000]),
                        AssistantMessage(content=resume_final),
                        UserMessage(content=suivi),
                    ],
                    max_tokens=2048,
                    model=model_name
                )
                st.success(reponse_suivi.choices[0].message.content)