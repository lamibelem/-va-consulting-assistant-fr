import streamlit as st
import json
from azure.ai.inference import ChatCompletionsClient
from azure.ai.inference.models import SystemMessage, UserMessage, AssistantMessage
from azure.core.credentials import AzureKeyCredential
from PyPDF2 import PdfReader
import pytesseract
from pdf2image import convert_from_bytes
import os
import smtplib
from email.message import EmailMessage
import csv
import io
import langdetect
from fpdf import FPDF

# --- Configuration Azure ---
endpoint = "https://DeepSeek-R1-iidkm.eastus2.models.ai.azure.com"
api_key = "u2tl0lAkttAf0dEDO4UP7yxYfxpCKSQt"
model_name = "DeepSeek-R1-iidkm"

# --- Chargement des cartes de prompts ---
with open("prompt_cards.json", "r", encoding="utf-8") as f:
    prompt_data = json.load(f)

prompt_options = [card["title"] for card in prompt_data]
prompt_descriptions = {card["title"]: card["description"] for card in prompt_data}
prompts = {card["title"]: card["prompt"] for card in prompt_data}

# --- UI ---
st.set_page_config(page_title="VA CONSULTING ‚Äì Assistant Fiscal AI", layout="centered")
st.image("va_logo.jpg", width=200)
st.title("VA CONSULTING ‚Äì Assistant Fiscal AI")

st.markdown("""
Bienvenue dans votre assistant fiscal intelligent. Posez une question ou t√©l√©versez un document fiscal pour recevoir des r√©ponses rapides et adapt√©es aux r√®gles fiscales d‚ÄôAfrique de l‚ÄôOuest.
""")

# --- S√©lecteur de prompt ---
prompt_mode = st.selectbox("üß† Choisissez un Mode d'Assistance:", prompt_options, help=prompt_descriptions[prompt_options[0]])
st.caption(f"üí° {prompt_descriptions[prompt_mode]}")

# --- Informations utilisateur et paiement ---
st.markdown("---")
col1, col2 = st.columns(2)
with col1:
    nom_utilisateur = st.text_input("üë§ Nom complet")
    societe_utilisateur = st.text_input("üè¢ Soci√©t√©")
with col2:
    email_utilisateur = st.text_input("üìß Email")
    paiement_valide = st.checkbox("‚úÖ J‚Äôai pay√© 2 000 XOF via Orange Money")

st.markdown("""
üí∞ **Acc√®s mensuel : 2 000 XOF**
üì± Paiement via **Orange Money** : **+226 76 43 73 58**
""")

# --- Saisie de question ---
st.markdown("### üßæ Posez votre question fiscale")
question_utilisateur = st.text_input("Entrez votre question")
if question_utilisateur:
    langue = langdetect.detect(question_utilisateur)
    client = ChatCompletionsClient(endpoint=endpoint, credential=AzureKeyCredential(api_key))
    reponse = client.complete(
        messages=[
            SystemMessage(content=prompts[prompt_mode]),
            UserMessage(content=question_utilisateur)
        ],
        max_tokens=2048,
        model=model_name
    )
    resultat = reponse.choices[0].message.content
    st.success(resultat)

    # G√©n√©ration PDF compatible UTF-8
    pdf = FPDF()
    pdf.add_page()

    font_path = os.path.join("fonts", "DejaVuSans.ttf")
    if os.path.exists(font_path):
        pdf.add_font("DejaVu", "", font_path)
        pdf.set_font("DejaVu", size=12)
    else:
        pdf.set_font("helvetica", size=12)

    pdf.multi_cell(0, 10, resultat)
    pdf_output = pdf.output(dest="S").encode("latin-1", "ignore")

    st.download_button("üìÑ T√©l√©charger la r√©ponse en PDF", data=pdf_output, file_name="reponse_va.pdf", mime="application/pdf")

    if email_utilisateur:
        try:
            with open("va_leads.csv", mode="a", newline="", encoding="utf-8") as f:
                writer = csv.writer(f)
                writer.writerow([nom_utilisateur, societe_utilisateur, email_utilisateur, question_utilisateur, resultat])
        except Exception:
            st.warning("‚ö†Ô∏è Impossible d'enregistrer dans le fichier CSV.")

# --- T√©l√©versement de document ---
st.markdown("### üìÑ Ou t√©l√©versez un document (.pdf ou .txt)")

fichier = st.file_uploader("T√©l√©verser un document", type=["pdf", "txt"])
if fichier:
    texte = ""
    if fichier.type == "application/pdf":
        try:
            pdf = PdfReader(fichier)
            texte = "\n".join([page.extract_text() for page in pdf.pages if page.extract_text()])
        except:
            texte = ""
        if not texte:
            st.info("üîé Extraction OCR en cours...")
            images = convert_from_bytes(fichier.read())
            texte = "\n".join([pytesseract.image_to_string(img) for img in images])
    else:
        texte = fichier.read().decode("utf-8")

    if not texte.strip():
        st.warning("‚ö†Ô∏è Aucun texte lisible trouv√©.")
    else:
        st.write("üìë Texte extrait :")
        st.code(texte[:1000])
        if st.button("üìä R√©sumer ce document"):
            client = ChatCompletionsClient(endpoint=endpoint, credential=AzureKeyCredential(api_key))
            reponse_doc = client.complete(
                messages=[
                    SystemMessage(content=prompts[prompt_mode]),
                    UserMessage(content=texte[:3000])
                ],
                max_tokens=2048,
                model=model_name
            )
            resume = reponse_doc.choices[0].message.content
            st.success(resume)

            suivi = st.text_input("üí¨ Question compl√©mentaire sur ce document :")
            if suivi:
                reponse_suivi = client.complete(
                    messages=[
                        SystemMessage(content=prompts[prompt_mode]),
                        UserMessage(content=texte[:2000]),
                        AssistantMessage(content=resume),
                        UserMessage(content=suivi)
                    ],
                    max_tokens=2048,
                    model=model_name
                )
                st.success(reponse_suivi.choices[0].message.content)
